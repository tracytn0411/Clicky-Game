{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","checkImage","event","imageId","target","getAttribute","state","data","clicked","map","item","id","sort","Math","random","score","setState","topscore","rdata","className","this","key","data-id","onClick","src","image","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u5BA8HeA,G,kBAzHb,aAAe,IAAD,8BAEZ,+CAWFC,WAAa,SAACC,GAMZ,IAAIC,EAAUD,EAAME,OAAOC,aAAa,WAIxC,IAA2C,IAAvC,EAAKC,MAAMC,KAAKJ,EAAQ,GAAGK,QAAkB,CAK/C,IAAID,EAAO,EAAKD,MAAMC,KAAKE,KAAI,SAAAC,GAE7B,OADIA,EAAKC,KAAOR,IAASO,EAAKF,SAAU,GACjCE,KAITH,EAAKK,MAAK,kBAAMC,KAAKC,SAAW,MAEhC,IAAIC,EAAQ,EAAKT,MAAMS,MAAQ,EAE/B,EAAKC,SAAS,CACZT,OACAQ,eAIF,EAAKC,SAAS,CACZC,SAAU,EAAKX,MAAMS,MACrBA,MAAO,KAzCX,EAAKT,MAAQ,CACXC,KAAMW,EACNH,MAAQ,EACRE,SAAU,GARA,E,sEAmDJ,IAAD,OACP,OACE,yBAAKE,UAAU,OAEb,sCAAYC,KAAKd,MAAMS,MAAvB,iBAA4CK,KAAKd,MAAMW,UAEvD,yBAAKE,UAAU,kBACZC,KAAKd,MAAMC,KAAKE,KAAI,SAAAC,GAAI,OACrB,yBACEW,IAAKX,EAAKC,GACVW,UAASZ,EAAKC,GACdY,QAAS,EAAKtB,WACduB,IAAKd,EAAKe,MACVC,IAAK,sB,GAjEHC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fbc92bf7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport rdata from './data.json'\n//import logo from './logo.svg';\nimport './App.css';\nclass App extends Component {\n  constructor() {\n    //you must call the Component constructor function using super(), before setting any properties in this class - this is a react standard\n    super();\n\n    //this is a react standard, you must call this.state\n    this.state = {\n      data: rdata,\n      score : 0,\n      topscore: 0,\n    }\n\n  }\n\n  checkImage = (event) => {\n    \n    // debugger;\n\n    //event.target will get you what you just clicked on, which is the image\n\n    var imageId = event.target.getAttribute('data-id');\n\n    //debugger;\n\n    if (this.state.data[imageId-1].clicked === false){\n\n      //need to make clicked to true\n\n\n      let data = this.state.data.map(item => {\n        if (item.id === imageId) item.clicked = true;\n        return item;\n      })\n\n      //shuffle the data array\n      data.sort(() => Math.random() - 0.5);\n      \n      let score = this.state.score + 1;\n\n      this.setState({\n        data,\n        score\n      }) \n\n    }else{\n      this.setState({\n        topscore: this.state.score,\n        score: 0\n      }) \n    }    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <h2>Score: {this.state.score} | Top Score: {this.state.topscore}</h2>\n\n        <div className=\"imageContainer\">\n          {this.state.data.map(item => (\n              <img\n                key={item.id}\n                data-id={item.id}\n                onClick={this.checkImage}\n                src={item.image}\n                alt={'altImage'}\n              />\n            ))}\n        </div>\n\n        {/*<img src={a} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={b} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={c} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={d} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={e} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={f} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={g} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={h} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={i} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={j} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={k} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />\n        <img src={l} className=\"App-logo\" alt=\"logo\" onClick={this.checkImage} />*/}\n\n        {/*<Person/>*/}\n\n        {/*<Friend friend_name=\"human\" />\n        <Friend friend_name=\"Irina\" />\n        <Friend friend_name=\"Melinda\" />\n        <Friend friend_name=\"Arashi\" />\n        <Friend friend_name=\"Jacob\" />*/}\n\n        {/*\n        <input type=\"text\" onChange={this.updateName} placeholder=\"update name\"/>\n\n        <input type=\"text\" onChange={this.updateAnotherName} placeholder=\"update another name\"/>\n\n        <button onClick={this.increaseNum}>click me</button>\n\n        <br /><br />\n        {this.state.num}\n        <br /><br />\n\n        {this.state.anotherName}\n        {this.state.anotherName}\n        {this.state.anotherName}\n        --------\n\n        {this.state.anotherName.split('').reverse().join('')}\n\n        --------\n\n        {this.state.name}\n        {this.state.num}\n        \n        --------\n\n        {this.state.name.split('').reverse().join('')}*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}